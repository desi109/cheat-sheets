Web API (E-Commerce) - Backend and Frontend    (Part 2)
 --------------------------------------------------------
 
Users  Model and API

           
          1. User sign-in (using id/password,
   +---+     facebook, google, etc.)                             +----------------+
   |   | ------------------------------------------------------> |                |
   |   |                                                         | Authentication |
   |   |                                                         |     Server     |
   |   |                                                         |                |
   | U |                        2. User authenticated, JWT       +----------------+
   | s |                           created, and returned to user    (JWT) |
   | e | <----------------------------------------------------------------+
   | r |
   |   |
   |   |
   |   |  3. User passes JWT when
   |   |     making  API calls                           (JWT)   +----------------+
   |   | ------------------------------------------------------> |                |
   |   |                                                         |   Application  |
   +---+                                                         |      Server    |
                                                                 |                |
     ^                                                           +----------------+
     |                                                                     |
     +---------------------------------------------------------------------+
                                             4. Application verifies and 
                                                processes API call 
 
 
 
 
   The concept which is followed in every authentication server is as follows:
        First, the user is signing in, using his ID/email and password. 
        Then the Authentication Server will answer with 'Authenticated' 
        if the user has the right credentials and JWT (JSON Web Token).
        
        This token (JWT) will be returned to the user so the user can use it
        to get the other APIs like products and orders.
        
        
        
        Of course, the user has not all rights to do what he wants with the backend.
        So we can, like, differentiate between the admins and the users, but they are
        in the same table. So some users will have special ability to do some things:
        creating products, creating orders, removing orders, changing the status of 
        the product, etc..
        So when the user has this token, he can pass it with any API call. 
        For example, creating a product to the server and to the API, then the server
        will say, yeah, you are verified and you can make the API call.
 
 
 
   Main Steps:
  ------------
  - Create the User Model and Schema
  - Post/Register a new User REST API
  - Hashing the User password
    Of course, we are not going to save the password in the database, exactly.
    So we have to hash passwords. So if there is some attack and someone stole 
    the database, then they will not have the hash key to unlock hashes and get
    user passwords.
  - Get User and list of Users excluding password
  - Update User data with/without password
  - Protecting the API - Authentication JWT
    For example, not any user will be able to create a product, only the admins.
    Also not any user will be able to change the state of the order, only the admins.
  - Login a User REST API and creating a token
  - Authentication error handling
  - Add more secret user information to token
  - Get User count REST API
  

  
=================================================================================       
=================================================================================     
=================================================================================
 1. Users Model & Schema :    
---------------------------

       Now we will see how to build the users model or the users schema. 
       Everything in Mongoose start with a schema. Each schema maps to a MongoDB
       collection and defines the shape of the document within that collection.
       So based on the model, which we create in '1_web_api_tools_and_setup' step
       '9. Analys and create the e-shop database/schemas and routes'.
       We are going to build the same schema as we build it before in that model.

       See also: https://mongoosejs.com/docs/schematypes.html
                 https://mongoosejs.com/docs/schematypes.html#schematype-options
       
       So into 'models/user.js' we add next :
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
    },
    email: {
        type: String,
        required: true,
    },
    passwordHash: {
        type: String,
        required: true,
    },
    phone: {
        type: String,
        required: true,
    },
    isAdmin: {
        type: Boolean,
        default: false,
    },
    street: {
        type: String,
        default: ''
    },
    apartment: {
        type: String,
        default: ''
    },
    zip :{
        type: String,
        default: ''
    },
    city: {
        type: String,
        default: ''
    },
    country: {
        type: String,
        default: ''
    }

});


// Use next in the front end as a normal ID to fetch user data or identify a user.
userSchema.virtual('id').get(function () {
    return this._id.toHexString();
});


// Enable the virtuals for the schema
userSchema.set('toJSON', {
    virtuals: true,
});


// Next is the normal export of the module and the schema
exports.User = mongoose.model('User', userSchema);
exports.userSchema = userSchema;





=================================================================================       
=================================================================================     
=================================================================================
 2. Register/Login (POST) a user :    
--------------------------------------

First we will create POST API. 
        Go into 'routes/users.js' and add next :
// POST (registrate) a new user
// http://localhost:3000/api/v1/users
router.post('/', async (req,res)=>{
    let user = new User({
        name: req.body.name,
        email: req.body.email,
        passwordHash: bcrypt.hashSync(req.body.passwordHash, 10),
        phone: req.body.phone,
        isAdmin: req.body.isAdmin,
        street: req.body.street,
        apartment: req.body.apartment,
        zip: req.body.zip,
        city: req.body.city,
        country: req.body.country,
    })
    user = await user.save();

    if(!user)
    return res.status(400).send('The user cannot be created!')

    res.send(user);
})




// POST (login) of an existing user
// http://localhost:3000/api/v1/users/login
router.post('/login', async (req,res) => {
    const user = await User.findOne({email: req.body.email})
    const secret = process.env.secret;
    if(!user) {
        return res.status(400).send('The user was not found!');
    }

    if(user && bcrypt.compareSync(req.body.passwordHash, user.passwordHash)) {
        const token = jwt.sign(
            {
                userId: user.id,
                isAdmin: user.isAdmin
            },
            secret,
            {expiresIn : 'id'}
        )
       
        res.status(200).send({user: user.email , token: token}) 
    } else {
       res.status(400).send('Password is wrong!');
    } 
 
    
})




=================================================================================       
=================================================================================     
=================================================================================
 3. Get / Delete / Update Users :    
---------------------------------


// GET list of all users
// http://localhost:3000/api/v1/users
router.get(`/`, async (req, res) =>{
    const userList = await User.find().select('-passwordHash');

    if(!userList) {
        res.status(500).json({success: false})
    } 
    res.send(userList);
})


// GET one user by ID
// http://localhost:3000/api/v1/users/6055a6a8eafaa314670475cf
router.get('/:id', async(req,res)=>{
    const user = await User.findById(req.params.id).select('-passwordHash');

    if(!user) {
        res.status(500).json({message: 'The user with the given ID was not found.'})
    } 
    res.status(200).send(user);
})


// PUT (edit) user information
// http://localhost:3000/api/v1/users/6055a6a8eafaa314670475cf
router.put('/:id',async (req, res)=> {

    const userExist = await User.findById(req.params.id);
    let newPasswordHash
    if(req.body.passwordHash) {
        newPasswordHash = bcrypt.hashSync(req.body.passwordHash, 10)
    } else {
        newPasswordHash = userExist.passwordHash;
    }

    const user = await User.findByIdAndUpdate(
        req.params.id,
        {
            name: req.body.name,
            email: req.body.email,
            passwordHash: newPasswordHash,
            phone: req.body.phone,
            isAdmin: req.body.isAdmin,
            street: req.body.street,
            apartment: req.body.apartment,
            zip: req.body.zip,
            city: req.body.city,
            country: req.body.country,
        },
        { new: true}
    )

    if(!user)
    return res.status(400).send('The user cannot be created!')

    res.send(user);
})


// DELETE one user by ID
// http://localhost:3000/api/v1/users/6055a6a8eafaa314670475cf
router.delete('/:id', (req, res)=>{
    User.findByIdAndRemove(req.params.id).then(user =>{
        if(user) {
            return res.status(200).json({success: true, message: 'The user is deleted!'})
        } else {
            return res.status(404).json({success: false , message: 'The user does not exists!'})
        }
    }).catch(err=>{
       return res.status(500).json({success: false, error: err}) 
    })
})


// GET number of all users
// http://localhost:3000/api/v1/users/get/count
router.get(`/get/count`, async (req, res) =>{
    const userCount = await User.countDocuments((count) => count)

    if(!userCount) {
        res.status(500).json({success: false})
    } 
    res.send({
        userCount: userCount
    });
})




=================================================================================       
=================================================================================     
=================================================================================
 4. POST and GET and DELETE to a User REST API: 
---------------------------------------------------

       Go to 'routes/users.js' and add/edit next at the top: 
const { User } = require('../models/user');
const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');


       Go to 'routes/users.js' and add/edit next at the bottom:
module.exports = router; 


       Open new terminal and install bcryptjs libabry:
npm install bcryptjs  


       Add secret (it can be anything) into .env file:
secret = my-song-is-nice


       Create folder helpers.
       Create error-handler.js file:
function errorHandler(err, req, res, next) {
    if (err.name === 'UnauthorizedError') {
        // JWT authentication error
        return res.status(401).json({message: 'The user is not authorized!'})
    }

    if (err.name === 'ValidationError') {
        //  Validation error
        return res.status(401).json({message: err})
    }

    // Default to 500 server error
    return res.status(500).json(err);
}

module.exports = errorHandler;



       Create jwt.js file:
const expressJwt = require('express-jwt');

function authJwt() {
    const secret = process.env.secret;
    const api = process.env.API_URL;
    return expressJwt({
        secret,
        algorithms: ['HS256'],
        isRevoked: isRevoked
    }).unless({
        path: [
            {url: /\/api\/v1\/products(.*)/ , methods: ['GET', 'OPTIONS'] },
            {url: /\/api\/v1\/categories(.*)/ , methods: ['GET', 'OPTIONS'] },
            `${api}/users/login`,
            `${api}/users/registration`,
        ]
    })
}

async function isRevoked(req, payload, done) {
    if(!payload.isAdmin) {
        done(null, true)
    }

    done();
}

module.exports = authJwt





       Add next to app.js file:
const authJwt = require('./helpers/jwt');
const errorHandler = require('./helpers/error-handler');
app.use(authJwt());
app.use(errorHandler);



   
       Test all with Postman. 
       See file 3_web_api_postman_tests.
       
       
       


