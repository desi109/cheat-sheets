ConfigMaps provide a way to store configuration information and provide it to containers in a Pod. What's really nice
about this is if you have a container within a Pod that gets scaled out and even scheduled on other nodes, then you are
going to be able to get this configuration information anywhere throughout the cluster.
So ConfigMap provides a way to inject configuration data into a container. It can store entire files or provide key/value
 pairs:
  - Store in a File. Key is the filename, value is the file content (can be JSON, XML, keys/values, etc.)
  - Provide on the command-line
  - ConfigMap manifest

  Accessing ConfigNap data in a Pod - configMap data can be accessed in a Pod in several ways:
    - Environment variables (key/value)
    - ConfigMap Volume (access as file)



Example - define values in a ConfigMap manifest:
-------------------------------------------------
apiVersion: v1
kind: ConfigMap                              # A ConfigMap resource
metadata:
  name: app-settings                         # Name of the ConfigMap
  labels:
    app: app-settings
data:                                        # ConfigMap data
  enemies: aliens
  lives: "3"
  enemies.cheat: "true"
  enemies.cheat.level: "noGoodRotten"


Crete from a ConfigMap manifest:
--------------------------------
kubectl create -f file-configMap.yml




Example - define key/value pairs in a File
-------------------------------------------
apiVersion: v1
kind: ConfigMap
data:
  game.config:  |-                             # Note that the file name is used as the key for the values
    enemies=aliens                             # Key/Value pairs defines in a file named game.config
    lives=3
    enemies.cheat=true
    enemies.cheat.level=noGoodRotten           # Nested properties can be defined and assigned a value



Crete from a ConfigMap manifest:
--------------------------------
kubectl create configmap [configmap-name] --from-file=[path-to-file]
kubectl create configmap game-config --from-file=game.config




 Example - define key/value pairs in an ENVIRONMENT File
 ---------------------------------------------------------
 apiVersion: v1
 kind: ConfigMap
 data:                             # Note that the file name is NOT included as a key
     enemies=aliens                # Key/Value pairs can be defines in an "environment" variables file (game-config.env)
     lives=3
     enemies.cheat=true
     enemies.cheat.level=noGoodRotten     # Nested properties can be defined and assigned a value


NOTE: The command is different for environment variables.
 kubectl create configmap [configmap-name] --from-env-file=[path-to-file]
 kubectl create configmap game-config --from-env-file=game.config



 Commands:
    1. Create a ConfigMap from a config file:
        kubectl create configmap [configmap-name] --from-file=[path-to-file]
        kubectl create configmap game-config --from-file=game.config
    2. Create a ConfigMap from an environment file:
        kubectl create configmap [configmap-name] --from-env-file=[path-to-file]
        kubectl create configmap game-config --from-env-file=game.config
    3. Create a ConfigMap from individual data values:
        kubectl create configmap [configmap-name] --from-literal=[key]=[value]
        kubectl create configmap game-config --from-literal=enemies=alie
        kubectl create configmap game-config --from-literal=otherKey=otherValue

     4. Get a ConfigMap and view its content:
        kubectl get cm [configmap-name] -o yaml



Accessing a ConfigMap: Environment Variables
---------------------------------------------
Pods can access ConfigMap values through environment vars.
ENEMIES environment variable creates (value=alians) int the next example.

                                                                       Pod file:
                                                                      ----------
ConfigMap file:                                                       apiVersion: apps/v1
----------------                                                      ...
apiVersion: v1                                                        spec:
kind: ConfigMap                                                        template:
metadata:                                                                ...
  name: app-settings   <----------------------------+                  spec:
data:                                               |                    containers:
  enemies: aliens    <--------------------------+   |                    env:
  lives: "3"                                    |   |                    - name: ENEMIES -----------> Environment variable name
  enemies.cheat: "true"                         |   |                      valueFrom:
  enemies.cheat.level: "noGoodRotten"           |   |                         configMapKeyRef:
                                                |   +--------------------------- name: app-settings
                                                +------------------------------- key: enemies




Secrets - Core Concepts
------------------------
A secret is an object that contains a small amount of sensitive data such as a password, token, or key. K8s can store
sensitive information (password, keys, certificates, etc.). That avoid us storing secrets, and container images, in files,
or in deployment manifests. We can mount these secrets into pods as files, and that will involve volumes, or we can use
environment variables. K8s only makes secrets available to Nodes that have a Pod requesting the secret. Secrets are
stored in tmpfs on a Node (not on disk).

Secret - Best Practices:
------------------------
- Enable encryption at rest for cluster data (https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)
- Limit access to etcd (where Secrets are stored) to only admin users
- Use SSL/TLS for etcd peer-to-peer communication
- Manifest (YAML/JSON) files only base64 encode the Secret
- Pods can access Secrets so secure which user can create Pods. Role-based access control (RBAC) can be used.


Commands to Create a Secret:
-----------------------------
1. Create a Secret and store securely in k8s:
   kubectl create secret generic [secret-name] --from-literal=[key]=[value]
   kubectl create secret generic my-secret --from-literal=username=admin --from-literal=pwd=my-password

2. Create a Secret from a file:
    kubectl create secret generic [secret-name] --from-file=[path-to-file]
    kubectl create secret generic my-secret --from-file=ssh-private-key=~/.ssh/id_rsa --from-file=ssh-public-key=~/.ssh/id_rsa.pub

3. Crete a secret from a key pair:
    kubectl create secret tls [secret-name] --cert=[path-to-cert-file] --key=[path-to-key-file]
    kubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key

4. Get secrets:
   kubectl get secrets

5. Get YAML for specific secret:
    kubectl get secret [secret-name] -o yaml
    kubectl get secret my-secret -o yaml


Example - Define A Secret in YAML:
----------------------------------
apiVersion: v1
kind: Secret                       # Define a Secret
metadata:
  name: db-password                # Secret name
type: Opaque
data:
  app-password: cGFzc3dvcmQ=       # Keys/values for Secret - Base64 encoded password
  admin-password: dmVyeV9zZWNMyZ



Accessing a Secret: Environment Variables
---------------------------------------------
Pods can access Secret values through environment vars.
DATABASE_PASSWORD environment variable created.
                                                                        Pod file:
                                                                       ----------
 ConfigMap file:                                                       apiVersion: apps/v1
 ----------------                                                      ...
 apiVersion: v1                                                        spec:
 kind: Secret                                                          template:
 metadata:                                                                ...
   name: db-password   <-----------------------------+                  spec:
 type: Opaque                                        |                    containers: ...
 data:                                               |                    env:
   db-password: cGFzc3dvcmQ=     <---------------+   |                    - name: DATABASE_PASSWORD ------> Environment variable name
   enemies.cheat: "true"                         |   |                      valueFrom:
   admin-password: dmVyeV9zZWNMyZ                |   |                         secretKeyRef:
                                                 |   +--------------------------- name: db-password
                                                 +------------------------------- key: db-password


                                                       