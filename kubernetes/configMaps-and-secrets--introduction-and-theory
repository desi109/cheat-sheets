ConfigMaps provide a way to store configuration information and provide it to containers in a Pod. What's really nice
about this is if you have a container within a Pod that gets scaled out and even scheduled on other nodes, then you are
going to be able to get this configuration information anywhere throughout the cluster.
So ConfigMap provides a way to inject configuration data into a container. It can store entire files or provide key/value
 pairs:
  - Store in a File. Key is the filename, value is the file content (can be JSON, XML, keys/values, etc.)
  - Provide on the command-line
  - ConfigMap manifest

  Accessing ConfigNap data in a Pod - configMap data can be accessed in a Pod in several ways:
    - Environment variables (key/value)
    - ConfigMap Volume (access as file)



Example - define values in a ConfigMap manifest:
-------------------------------------------------
apiVersion: v1
kind: ConfigMap                              # A ConfigMap resource
metadata:
  name: app-settings                         # Name of the ConfigMap
  labels:
    app: app-settings
data:                                        # ConfigMap data
  enemies: aliens
  lives: "3"
  enemies.cheat: "true"
  enemies.cheat.level: "noGoodRotten"


Crete from a ConfigMap manifest:
--------------------------------
kubectl create -f file-configMap.yml




Example - define key/value pairs in a File
-------------------------------------------
apiVersion: v1
kind: ConfigMap
data:
  game.config:  |-                             # Note that the file name is used as the key for the values
    enemies=aliens                             # Key/Value pairs defines in a file named game.config
    lives=3
    enemies.cheat=true
    enemies.cheat.level=noGoodRotten           # Nested properties can be defined and assigned a value



Crete from a ConfigMap manifest:
--------------------------------
kubectl create configmap [configmap-name] --from-file=[path-to-file]
kubectl create configmap game-config --from-file=game.config




 Example - define key/value pairs in an ENVIRONMENT File
 ---------------------------------------------------------
 apiVersion: v1
 kind: ConfigMap
 data:                             # Note that the file name is NOT included as a key
     enemies=aliens                # Key/Value pairs can be defines in an "environment" variables file (game-config.env)
     lives=3
     enemies.cheat=true
     enemies.cheat.level=noGoodRotten     # Nested properties can be defined and assigned a value


NOTE: The command is different for environment variables.
 kubectl create configmap [configmap-name] --from-env-file=[path-to-file]
 kubectl create configmap game-config --from-env-file=game.config



 Commands:
    1. Create a ConfigMap from a config file:
        kubectl create configmap [configmap-name] --from-file=[path-to-file]
        kubectl create configmap game-config --from-file=game.config
    2. Create a ConfigMap from an environment file:
        kubectl create configmap [configmap-name] --from-env-file=[path-to-file]
        kubectl create configmap game-config --from-env-file=game.config
    3. Create a ConfigMap from individual data values:
        kubectl create configmap [configmap-name] --from-literal=[key]=[value]
        kubectl create configmap game-config --from-literal=enemies=alie
        kubectl create configmap game-config --from-literal=otherKey=otherValue

     4. Get a ConfigMap and view its content:
        kubectl get cm [configmap-name] -o yaml



Accessing a ConfigMap: Environment Variables
---------------------------------------------
Pods can access ConfigMap values through environment vars.
ENEMIES environment variable creates (value=alians) int the next example.



                                                                       Pod file:
                                                                      ----------
ConfigMap file:                                                       apiVersion: apps/v1
----------------                                                      ...
apiVersion: v1                                                        spec:
kind: ConfigMap                                                        template:
metadata:                                                                ...
  name: app-settings   <----------------------------+                  spec:
data:                                               |                    containers:
  enemies: aliens    <--------------------------+   |                    env:
  lives: "3"                                    |   |                    - name: ENEMIES -----------> Environment variable name
  enemies.cheat: "true"                         |   |                      valueFrom:
  enemies.cheat.level: "noGoodRotten"           |   |                         configMapKeyRef:
                                                |   +--------------------------- name: app-settings
                                                +------------------------------- key: enemies


